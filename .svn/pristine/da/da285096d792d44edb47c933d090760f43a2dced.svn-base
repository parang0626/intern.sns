package sns.platform.comm.aop;



import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.aspectj.lang.ProceedingJoinPoint;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;

import sns.platform.comm.reslover.CommandMap;

public class ControllerAop {
	private static final Logger LOG = LoggerFactory.getLogger(ControllerAop.class);
	public Object trace(ProceedingJoinPoint joinPoint) throws Throwable{
		String signatureString = joinPoint.getSignature().toShortString();

		LOG.info("▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒  "+signatureString+" AOP InputValues 시작 ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒");
		
		Object args[] = joinPoint.getArgs();
		for (Object param : args) {
			if(param.getClass().equals(CommandMap.class)) {
				LOG.info("<---- Command Map Values ---->");
				CommandMap map = (CommandMap)param;
				if (map.getMap() !=null) {
					Set<String> keyset = map.getMap().keySet();
					Iterator<String> it = keyset.iterator();
					while(it.hasNext()) {
						String key = it.next();
						LOG.info("value->  "+key+" : "+map.getMap().get(key));
					}
				} else {
					LOG.info("  CommandMap에 입력된 값이 없습니다.");
				}
				if (map.getFilesMap() != null) {
					LOG.info("<-- Command FileMap Values -->");
					Set<String> keyset = map.getFilesMap().keySet();
					Iterator<String> it = keyset.iterator();
					while(it.hasNext()) {
						String key = it.next();
						LOG.info("Key : "+key+"▽");
						List<MultipartFile> fileList = (List<MultipartFile>)map.getFilesMap().get(key);
						for(MultipartFile file : fileList) {
							LOG.info("이름 : "+file.getOriginalFilename()+" 사이즈 : "+file.getSize()+" 타입 : "+file.getContentType());					
						}
					}
				}
			} else {
				LOG.info("inputValue = "+param.toString());
			}
		}
		
		
		LOG.info("▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒  "+signatureString+" AOP InputValues 끝    ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒");
		long start = System.currentTimeMillis();
		try {
			Object result = joinPoint.proceed();
			LOG.info("▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒  "+signatureString+" AOP OutputValues 시작  ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒");
			if(result.getClass().equals(ModelAndView.class)) {
				ModelAndView res = (ModelAndView)result;
				Map<String,Object>resMap = res.getModel();
				Set<String> keyset = resMap.keySet();
				Iterator<String> it = keyset.iterator();
				while(it.hasNext()) {
					String key = it.next();
					
					if(key=="data") {
						LOG.info("class->  "+resMap.get(key).getClass());
						LOG.info("value->  "+key+" ▼");
						if(resMap.get(key).getClass().equals(HashMap.class)) {
							
							Map<String,Object> dataMap = (Map<String,Object>)resMap.get(key);
							Set<String> datakeyset = dataMap.keySet();
							Iterator<String> datait = datakeyset.iterator();
							while(datait.hasNext()) {
								String datakey = datait.next();
								LOG.info("       --  "+datakey+" : "+dataMap.get(datakey));
							}
						} else {
							
							List<Map<String,Object>> dataList = (List<Map<String,Object>> ) resMap.get(key);
							int i=0;
							for(Map<String,Object> dataMap :  dataList) {
								LOG.info("         "+i+ "번째 data ▼");
								Set<String> datakeyset = dataMap.keySet();
								Iterator<String> datait = datakeyset.iterator();
								while(datait.hasNext()) {
									String datakey = datait.next();
									LOG.info("         --  "+datakey+" : "+dataMap.get(datakey));
								}
								i++;
							}
						}
					} else {
						LOG.info("value->  "+key+" : "+resMap.get(key));
					}
					
				}
			}
			return result;
		} finally {
			long finish = System.currentTimeMillis();
			LOG.info(signatureString+" 실행 시간 "+(finish-start)+"ms");
			LOG.info("▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒  "+signatureString+" AOP OutputValues 끝    ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒");
			
		}
	}

}
